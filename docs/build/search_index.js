var documenterSearchIndex = {"docs":
[{"location":"#UAI.jl","page":"UAI.jl","title":"UAI.jl","text":"","category":"section"},{"location":"","page":"UAI.jl","title":"UAI.jl","text":"Documentation for UAI.jl as educational library for the course Uncertainty in Artificial Intelligence at the KUleuven. The main goal of this library is educational. While I'm still working on implementing (more efficient) inference algorithms their are already useful things you can do with it.","category":"page"},{"location":"#Graph-notation","page":"UAI.jl","title":"Graph notation","text":"","category":"section"},{"location":"","page":"UAI.jl","title":"UAI.jl","text":"You can make a graph by using the following notation, a combination of julia '-', '<', '>', ';' and regular (node-name) symbols. Some examples:","category":"page"},{"location":"#Bayesian-Network-Collider","page":"UAI.jl","title":"Bayesian Network - Collider","text":"","category":"section"},{"location":"","page":"UAI.jl","title":"UAI.jl","text":"plotFromStr(\"a>c<b\", \"plots/collider.png\")","category":"page"},{"location":"","page":"UAI.jl","title":"UAI.jl","text":"(Image: )","category":"page"},{"location":"#Bayesian-Network-Fork","page":"UAI.jl","title":"Bayesian Network - Fork","text":"","category":"section"},{"location":"","page":"UAI.jl","title":"UAI.jl","text":"plotFromStr(\"a<f>b\", \"plots/fork.png\")","category":"page"},{"location":"","page":"UAI.jl","title":"UAI.jl","text":"(Image: )","category":"page"},{"location":"#Bayesian-Network-Chain","page":"UAI.jl","title":"Bayesian Network - Chain","text":"","category":"section"},{"location":"","page":"UAI.jl","title":"UAI.jl","text":"plotFromStr(\"a>b>c\", \"plots/chain.png\")","category":"page"},{"location":"","page":"UAI.jl","title":"UAI.jl","text":"(Image: )","category":"page"},{"location":"#Markov-Network-A-grid-with-a-loop","page":"UAI.jl","title":"Markov Network - A grid with a loop","text":"","category":"section"},{"location":"","page":"UAI.jl","title":"UAI.jl","text":"plotFromStr(\"a-b-c-d-a\", \"plots/grid.png\")","category":"page"},{"location":"","page":"UAI.jl","title":"UAI.jl","text":"(Image: )","category":"page"},{"location":"#Chain-Graphs","page":"UAI.jl","title":"Chain Graphs","text":"","category":"section"},{"location":"#Bucket-Elimination","page":"UAI.jl","title":"Bucket Elimination","text":"","category":"section"},{"location":"","page":"UAI.jl","title":"UAI.jl","text":"julia> j = JPD(\"a>d<b\")\nJPD(\"a>d<b\", p(a)p(b)p(d|a,b), [:a, :b, :d], Dict{Symbol,Union{Nothing, Array{T,1} where T}}(:a => nothing,:b => nothing,:d => nothing), Dict{AbstractFactor,Array{Float64,N} where N}())\n\njulia> bucks = bucketEliminate(j,makeOrder(\"a,b,d\"))\nAbstractFactor[p(a), p(d|a,b)]\nγ_a(d,b)=∑_a p(a)p(d|a,b)\na   :  \nb   :  p(b)γ_a(d,b)\nd   :  \n---------------------------------------------------\nAbstractFactor[p(b), γ_a(d,b)]\nγ_b(d)=∑_b p(b)γ_a(d,b)\na   :  \nb   :  \nd   :  γ_b(d)\n---------------------------------------------------\nAbstractFactor[γ_b(d)]\nγ_b(d)=∑_b p(b)γ_a(d,b)\nDict{Tuple{Int64,Symbol},Array{AbstractFactor,N} where N} with 3 entries:\n  (2, :b) => AbstractFactor[]\n  (1, :a) => AbstractFactor[]\n  (3, :d) => AbstractFactor[γ_b(d)]","category":"page"},{"location":"","page":"UAI.jl","title":"UAI.jl","text":"Modules = [UAI]","category":"page"},{"location":"#Base.convert-Tuple{Type{NamedArrays.NamedArray},DataFrames.DataFrame}","page":"UAI.jl","title":"Base.convert","text":"Converts a DataFrame to a NamedArray.\n\n\n\n\n\n","category":"method"},{"location":"#Base.convert-Union{Tuple{V}, Tuple{Type{DataFrames.DataFrame},NamedArrays.NamedArray{V,N,AT,DT} where DT where AT where N}} where V","page":"UAI.jl","title":"Base.convert","text":"Converts a NamedArray to a DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"#Base.selectdim-Tuple{NamedArrays.NamedArray,Any,Any}","page":"UAI.jl","title":"Base.selectdim","text":"Returns a view with all the elements in dimension dimname with values of dimval selected.\n\n\n\n\n\n","category":"method"},{"location":"#UAI.bucketEliminate-Tuple{JPD,Array{Symbol,N} where N}","page":"UAI.jl","title":"UAI.bucketEliminate","text":"bucketEliminate(j::JPD,order::Array{Var})\n\nRuns the bucket elimination on the given Joint Probability Distribution with the given order of variables. The final variable determines the marginal probability distribution to be computed.\n\n\n\n\n\n","category":"method"},{"location":"#UAI.bucketInitialise-Tuple{JPD,Array{Symbol,N} where N}","page":"UAI.jl","title":"UAI.bucketInitialise","text":"bucketInitialise(j::JPD, order::Array{Var})\n\nInitialises buckets for the bucket elimination algorithm of the given JPD as a dictionary from a (Int,Var) tuple to an Array of AbstractFactors. The order indicating Int is determined by the index of the Var in the given order.\n\n\n\n\n\n","category":"method"},{"location":"#UAI.disorient!-Tuple{Any}","page":"UAI.jl","title":"UAI.disorient!","text":"Doubles each directed edge of a directed graph in place.\n\n\n\n\n\n","category":"method"},{"location":"#UAI.disorient-Tuple{Any}","page":"UAI.jl","title":"UAI.disorient","text":"Doubles each directed edge of a directed graph.\n\n\n\n\n\n","category":"method"},{"location":"#UAI.drawFromStr-Tuple{String,String}","page":"UAI.jl","title":"UAI.drawFromStr","text":"drawFromStr(str::String, filename::String)\n\nFunction that draws the given string as a graph.\n\ndrawFromStr(\"a-b-c; c-b\", \"undirected.png\")\ndrawFromStr(\"a>b<c; c<b\", \"directed.png\")\ndrawFromStr(\"a>b<c; c<b-e-d-f>c\", \"chainGraph.png\")\n\n\n\n\n\n","category":"method"},{"location":"#UAI.firstBucket-Tuple{Array{Symbol,N} where N,Array{Symbol,N} where N}","page":"UAI.jl","title":"UAI.firstBucket","text":"firstBucket(remainingVars::Array{Var},orderedVars::Array{Var})\n\nReturns the first bucket ((Int,Var)-tuple ) of the given remaining variables.\n\n\n\n\n\n","category":"method"},{"location":"#UAI.getAllAncestors-Tuple{LightGraphs.SimpleGraphs.SimpleDiGraph,Integer}","page":"UAI.jl","title":"UAI.getAllAncestors","text":"getAllAncestors(g::DiGraph, node::Integer)\n\nReturns all ancestors of a node in a non-cyclic graph.\n\n\n\n\n\n","category":"method"},{"location":"#UAI.getAllAncestors-Union{Tuple{T}, Tuple{LightGraphs.SimpleGraphs.SimpleDiGraph,Array{T,N} where N}} where T<:Integer","page":"UAI.jl","title":"UAI.getAllAncestors","text":"Returns all ancestors of a list of nodes in a non-cyclic graph.\n\n\n\n\n\n","category":"method"},{"location":"#UAI.getAllDescendants-Tuple{LightGraphs.SimpleGraphs.SimpleDiGraph,Integer}","page":"UAI.jl","title":"UAI.getAllDescendants","text":"Returns all descendants of a node in a non-cyclic graph.\n\n\n\n\n\n","category":"method"},{"location":"#UAI.getAllDescendants-Union{Tuple{T}, Tuple{LightGraphs.SimpleGraphs.SimpleDiGraph,Array{T,N} where N}} where T<:Integer","page":"UAI.jl","title":"UAI.getAllDescendants","text":"Returns all descendants of a list of nodes in a non-cyclic graph.\n\n\n\n\n\n","category":"method"},{"location":"#UAI.getBayesianFactor-Tuple{Any,Any,Any}","page":"UAI.jl","title":"UAI.getBayesianFactor","text":"Returns the corresponding factor of vertex v of the given graph with the given names.\n\n\n\n\n\n","category":"method"},{"location":"#UAI.getChainComponents-Tuple{LightGraphs.SimpleGraphs.SimpleDiGraph}","page":"UAI.jl","title":"UAI.getChainComponents","text":"Gets the chain components of a graph with the given nodeNames.\n\n\n\n\n\n","category":"method"},{"location":"#UAI.getDiNodeNames-Tuple{Any}","page":"UAI.jl","title":"UAI.getDiNodeNames","text":"Splits subParts in directed \n\n\n\n\n\n","category":"method"},{"location":"#UAI.getFactorGraph-Tuple{String}","page":"UAI.jl","title":"UAI.getFactorGraph","text":"getFactorGraph(str::String)::MetaGraph\n\nReads a graph-string and returns a factor-graph.\n\n\n\n\n\n","category":"method"},{"location":"#UAI.getNamedTable-Tuple{Any,AbstractFactor}","page":"UAI.jl","title":"UAI.getNamedTable","text":"Returns an empty NamedArray with all the names set if all domains of the factor are specified.\n\nErrors when some of the required domains are still not specified.\n\n\n\n\n\n","category":"method"},{"location":"#UAI.isDMap-Tuple{String,Any}","page":"UAI.jl","title":"UAI.isDMap","text":"isDMap(graphString::String, idpList)\n\nReturns true when the given graphical model represented as a string is an Dependence-map for the given list of independence statements.\n\nlp = [(@isIdp c d|a) (@isIdp c b|a)]\ngraphstring = \"c-a-b-d-a\"\nisDMap(graphstring,lp)\n# output\n\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#UAI.isIMap-Tuple{String,Any}","page":"UAI.jl","title":"UAI.isIMap","text":"isIMap(graphString::String, idpList)\n\nReturns true when the given graphical model represented as a string is an Independence-map for the given list of independence statements.\n\nlp = [(@isIdp a b|c)]\ngraphstring = \"a>c<b\"\nisIMap(graphstring,lp)\n\n# output\nfalse\n\n\n\n\n\n","category":"method"},{"location":"#UAI.isPerfectMap-Tuple{String,Any}","page":"UAI.jl","title":"UAI.isPerfectMap","text":"isPerfectMap(graphString::String, idpList)\n\nTests whether a given list of independence statements is a perfect map for the given graph string. \n\nlp = [(@isIdp c d|a) (@isIdp c b|a)]\ngraphstring = \"c-a-b-d-a\"\nisPerfectMap(graphstring,lp)\n\n# output\n\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#UAI.makeOrder-Tuple{String}","page":"UAI.jl","title":"UAI.makeOrder","text":"makerOrder(str::String)\n\nMakes an ordering of a comma sperated string useful for running the bucket elimination algorithm.\n\nmakeOrder(\"a,b,c\")\n\n\n\n\n\n","category":"method"},{"location":"#UAI.marryAll!-Tuple{LightGraphs.SimpleGraphs.SimpleDiGraph,Array}","page":"UAI.jl","title":"UAI.marryAll!","text":"Addes bi-directional edges between all given nodes in place.\n\n\n\n\n\n","category":"method"},{"location":"#UAI.marryAll-Tuple{LightGraphs.SimpleGraphs.SimpleDiGraph,Array}","page":"UAI.jl","title":"UAI.marryAll","text":"Returns a new graph with bi-directional edges between all given nodes.\n\n\n\n\n\n","category":"method"},{"location":"#UAI.message-Tuple{Symbol,Array{AbstractFactor,N} where N}","page":"UAI.jl","title":"UAI.message","text":"message(var::Var, factors::Array{AbstractFactor})::MessageFactor\n\nComputes message γ_{var}\n\n\n\n\n\n","category":"method"},{"location":"#UAI.moralize!-Tuple{LightGraphs.SimpleGraphs.SimpleDiGraph}","page":"UAI.jl","title":"UAI.moralize!","text":"Marries all the direct parents of each node in place.\n\n\n\n\n\n","category":"method"},{"location":"#UAI.moralize-Tuple{LightGraphs.SimpleGraphs.SimpleDiGraph}","page":"UAI.jl","title":"UAI.moralize","text":"Marries all the direct parents of each node.\n\n\n\n\n\n","category":"method"},{"location":"#UAI.parseGraph-Tuple{Any}","page":"UAI.jl","title":"UAI.parseGraph","text":"Function parses the given string as a graph depending on the type of string Returns a tuple of type (Graph,[NodeNameStr])\n\n\n\n\n\n","category":"method"},{"location":"#UAI.plotFG-Tuple{MetaGraphs.MetaGraph}","page":"UAI.jl","title":"UAI.plotFG","text":"plotFG(g::MetaGraph)\n\nPlots the given MetaGraph as a Factor Graph. \n\n\n\n\n\n","category":"method"},{"location":"#UAI.plotFromStr-Tuple{Any,String}","page":"UAI.jl","title":"UAI.plotFromStr","text":"plotFromStr(str, filename::String)\n\nFunction that draws the given string as a graph using Plots and GraphRecipes. Chain Graphs not yet supported.\n\nplotFromStr(\"a-b-c; c-b\", \"undirected.png\")\nplotFromStr(\"a>b<c; c<b\", \"directed.png\")\n\n\n\n\n\n","category":"method"},{"location":"#UAI.printSorted-Tuple{Any}","page":"UAI.jl","title":"UAI.printSorted","text":"\n\n\n\n","category":"method"},{"location":"#UAI.@g_str-Tuple{Any}","page":"UAI.jl","title":"UAI.@g_str","text":"Generates a named graph from a string by using parseGraph.\n\n\n\n\n\n","category":"macro"},{"location":"#UAI.@isDep-Tuple{Any,Any}","page":"UAI.jl","title":"UAI.@isDep","text":"isDep(firstVar, queryExpr)\n\n\n\n\n\n","category":"macro"},{"location":"#UAI.@isIdp-Tuple{Any,Any}","page":"UAI.jl","title":"UAI.@isIdp","text":"isIdp(firstVar, queryExpr)\n\n\n\n\n\n","category":"macro"}]
}
